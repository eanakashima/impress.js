[XXX 1. SLIDE: Title]

# Hello, I'm Rachel Myers, this is my friend Emily Nakashima. We're going to tell you our story of how we became professional software engineers.

We crafted the content of this talk together, but I'm going to talk and she's going to visual stuff. Emily's actually way more eloquent than I am, but unfortunately, I have longer hair, so here we are.


XXX 2 SLIDE: Jay & Silent Bob]

Today we're both software engineers at ModCloth, even though neither of us have degrees in software.


[XXX 3 SLIDE: Alias Rachel = Rachel]

My background is being a science nerd in high school and then a philosophy student at texas football school. No computer background!

[XXX 4 SLIDE: Introduce Rachel / FOOTBALL RACHEL]
[4a SLIDE: flying football]

After college, I did various community-servicy things trying to be useful, but did the least useful thing possible and got a masters in Philosophy. 

[XXX 5. SLIDE: Life Lesson #1: Philosophy of color: badass, but utterly without application.]
[5b. SLIDE: spinny beachball]

Emily was always computer-y; she spent her quality time with photoshop and desktop publishing software. She tried to learn programming, also, but was stumped by the library books on programming. They were all either dedicated to the *Visual*alphabet or to snakes. So instead she went to a good school and studied architecture.

[XXX 6 SLIDE: Lesson #2: Sad Emily, snakes, alphabet: Life Lesson #2: It's hard to find an entry point into programming if you don't know what you're looking for.]


We were each unlikely engineers, but after school, we independently saw software engineering as a craft that was intellectually demanding, respected, and unambiguously useful.

I got my start in software engineering when I moved cross-country to Oakland to be near a cute guy I met at a wedding.

[XXX 7 SLIDE: Lesson #3: Nice guy I met at a wedding: Sometimes a crazy leap is a good idea]

*Visual that kind of makes fun of this life lesson, because it's crazy

[XXX 8 SLIDE: Life lessong #4: Railsbridge: we are legion. It's easier to learn in a community where people want to teach and chat and learn. Start meeting people!]

I didn't have much to do when I got here, but one night, my now boyfriend was attempting some matrix math so he could rewrite a portion of one of his side projects in C to control the memory management. I took lots of math in school, so I helped him out. And then I started asking questions about how that math was useful. What's memory? What's a pointer? What's garbage collection?

He suggested I try RailsBridge (my first one was RailsBridge #2), and even came with me because I was scared I would be totally lost.

[XXX 9 Slide: BOOKS BOOKS BOOKS]

In all, I spent 2 years being unemployed, but I used my time optimistically.
[I read books
 Why's poignant's guide *Visual*
I read the Well Grounded Rubyist *Visual*
I read the Structure and Interpretation of Computer Programs (SICP) ]

I attended 4 RailsBridge workshops in a row, before I started helping out. *Visual
I attended ruby meetups about every possible subject*
I went to php meetups, where they kept talking about node.js [XXX wat].
I attended the only django meetup I've ever heard of.
I attended conferences where I felt like the dumbest person in the room.

And I started going to the gym [XXX WAT], because my gym buddy at the time would tell me about complex data structures while we did sit ups and ran on the treadmill.

[XXX 10 Slide: LESSION #5: HAPPY RACHEL]

Then, in 2009, I was at a normal sf ruby meetup. In response to a question, Sarah Allen said she always was looking for new young developers to work with and I shouted out "I'll work for free if I get to pair with Sarah" ... but I bombed my interview with her company, Blazing Cloud. I didn't know html, CSS, Javascript, SQL, git, gems, how databases work, patterns, hard ruby or anything beyond basic rails, or the whole ecosystem of resources and skills I use all the time now. 

[XXX 10b. Slide: LESSION #5: HAPPY RACHEL / SAD CLOUD]

But I was hired as the free intern at Blazing Cloud; the contract said "having you around will slow us down and loose us money, but you can stay anyway." I was stoked! The projects I paired on and then got as my own were the projects other people probably considered shit work. I loved it. And because I was the intern, people mentored me, and gave me reading suggestions.


[XXX 10c. SLIDE: Life Lesson #5: Get onto a real-life project any way you can.]

The same thing happened to Emily -- she was hired to do html/css work, but the manager of the back-end group lived in a Kathy cartoon, always looking stressed out with wavy lines around her head, so Emily volunteered to help out on back-end bugs.
Life lesson #5: No matter how you learn, find a real project to work on, even if you have to work for free or in the financial services industry.


After 6 months of working as an intern on small and easy projects, I had learned a lot, and wanted my chance at a junior engineer position. So I practiced working white board problems from the internet. I got friends to interview me and give me honest feedback. And I updated my resume to say "look at all the things I've done in the last six months!"

[XXX 11 ASPIRATIONAL RESUME] Life lesson #6: Make your resume aspirational. If you want to do something, try it and tell people you're trying.

Then I applied to as many places as I could with a genuine email. Here's one I actually sent:

*Visual*
Hi [Company]!
I've been the Rails Intern at Blazing Cloud for 7 months, and I'm looking for a junior developer position.  I feel like I know a bit about [Company] because I'm active in the SF Ruby meetup group and RailsBridge, and [Company] has been a great supporter of both.  I'm not sure if the Junior Developer position is right for me, but please let me know if one is!
Cheers!
Rachel Myers
<Myers_resume.pdf>

What I didn't realize at the time was tapped into a current. People who support RailsBridge are there to help people level up their engineering skills, and I presented myself as an alum, ready to level up. Sometimes organizations won't know where to put in a junior engineer, but there are a lot of people in the community who want to help bring in new talent.

[XXX 12 SLIDE: Life Lesson #7: Find the people that want to help you. Tap into the Developer Mafia.)

My crazy letter and charm actually landed me two job offers, and I had to choose. The first offer was for non developer position with the promise of transitioning to engineering. 

The second offer was from ModCloth, as an associate software engineer. 

But it was also incredibly intimidating. All my interviews at ModCloth were with very smart people. So it seemed like a real possibility that they'd notice I wasn't as smart. I wondered if I was setting myself up for failure by overreaching. In retrospect that seems ridiculous, because I grew into the job. I learned that *I* *can* solve hard problems. But I had to take a jump to find out.


[XXX 13 SLIDE: Life Lesson #3: Sometimes a crazy leap is a good thing.)


Most importantly, the thing about engineering is that every problem will be new and you'll always be learning.

[XXX 14 SLIDE: Life lesson #8: Keep learning (everyone else is probably just pretending they already know) ]

For example, right now Emily is learning: more ruby, more rails, software design patters (both conceptual and implementation-level) and mobile development.

Right now I'm learning the inner working of git, patterns for distributed systems and service-oriented architecture and reading Kent Beck's Smalltalk Best Practice Patterns. And both of us are always trying to learn all the things we would have gotten in a CS program.


[XXX 14 SLIDE: CREDITS/FOLLOW US]
Follow us on Twitter